#!/usr/bin/python

import json
import sys
import os
import os.path
import boto3

client = boto3.client('ssm')


def open_secrets():
    if os.path.isfile('/etc/secrets.json'):
        return json.loads(open('/etc/secrets.json').read())
    return {}


def save_secrets(secrets):
    print("Saving passwords to /etc/secrets.json")
    with open('/etc/secrets.json', 'w') as f:
        f.write(json.dumps(secrets))

def put_secret(secret, value):
    client.put_parameter(Name=secret, Type="SecureString", Value = value)

def get_secrets(path):
    secrets = {}
    more = True
    token = None
    while more:
        if token is None:
            response = client.get_parameters_by_path(Path=path, Recursive=True, WithDecryption=True, MaxResults=10)
        else:
            response = client.get_parameters_by_path(Path=path, Recursive=True, WithDecryption=True, MaxResults=10, NextToken=token)
        for param in response['Parameters']:
            secrets[param['Name'].split("/")[-1]] = param['Value']
        token = response.get('NextToken')
        more = False if token is None else True

    return secrets

path = os.getenv("environment")
if path is None:
    print("Missing envvar called: 'environment'")
path = "/" + path
saved_secrets = open_secrets()
secrets = get_secrets(path)
updated = False

for key in secrets:
    if saved_secrets.get(key) == None:
        print("Saving new secret " + key)
        saved_secrets[key] = secrets[key]
        updated = True

for key in saved_secrets:
    if secrets.get(key) == None:
        print("Uploading new secret " + key)
        updated = True
        put_secret(path + "/" + key, saved_secrets[key])


if updated:
    save_secrets(saved_secrets)